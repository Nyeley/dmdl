#       main:               value of crypto is expressed in this currency
#Output arbVector:          Vector of 9 information about the trade executed
#Usage  CreateArbVector()
quantity      <- min(Qbuy, Qsell)
profit        <- round((sellPrice/buyPrice)-commissions-1,4)
profitUsd     <- paste0(round(sellPrice*profit*quantity*baseCurrencyPrice,3),"$")
profit        <- paste0(profit*100,"%")
arbVector     <<- c(Time,crypto,main,buyPrice,exchangeBuy,sellPrice,exchangeSell,quantity,profit,profitUsd)
}
####-----Options and packages-----####
library(curl) # If you don't have, install.
library(httr) # If you don't have, install
# source("CreateArbVector.R").
options(scipen=50)
options(width=200)
####-----Costants-----#####
allCrypto     <- c("DENT","VET","DOCK","AGI","AION","CVC","ENJ","GVT","INS", "IOST","IOTX",
"KEY","KNC","LOOM","MANA","OMG","QKC","REQ","SNT","ZIL","ZRX")
baseCurrency  <- "ETH"
commissions   <- 0.0002   #Real commission is 0.00275
####-----Create Environment-----#####
Ncoins         <- length(allCrypto)
exchange1      <- "Binance"
exchange2      <- "Kukoin"
Iterationcount <- 1
separate       <- noquote("-----------------------------------------------")
while(T){
for(i in 1:Ncoins){
if(i == 1){
allCryptoKuk <- paste0(allCrypto,"-", baseCurrency)
allCryptoBin <- paste0(allCrypto, baseCurrency)
arbStorage   <- data.frame(matrix(vector(),0,10))
colnames(arbStorage)<- c("Time","Coin","Main","BuyPrice","Exchange Buy" ,"SellPrice","ExchangeSell" ,"AvaiableQty","Net Profit","ProfitUsd")
A            <- 1
}
}
for(i in 1:Ncoins){
if(i == 1){
allCryptoKuk <- paste0(allCrypto,"-", baseCurrency)
allCryptoBin <- paste0(allCrypto, baseCurrency)
arbStorage   <- data.frame(matrix(vector(),0,10))
colnames(arbStorage)<- c("Time","Coin","Main","BuyPrice","Exchange Buy" ,"SellPrice","ExchangeSell" ,"AvaiableQty","Net Profit","ProfitUsd")
A            <- 1
}
}}
url <- "https://www.quandl.com/api/v3/datasets/USTREASURY/YIELD.csv"#path for the treasury yields
x   <- c(1/12, 2/12, 3/12, 6/12, 1, 2, 3, 5, 7, 10, 20, 30)                       #vector of maturities in years
quandl.read <- function(url){
dat <- read.table(url, header = TRUE, sep = ",")
dat$Date <- as.Date(as.character(dat$Date))
return(dat)}
url <- read.csv("https://www.quandl.com/api/v3/datasets/USTREASURY/YIELD.csv")#vector of maturities in years
url <- read.csv("https://www.quandl.com/api/v3/datasets/USTREASURY/YIELD.csv")#vector of maturities in years
y <- url$X1.MO
View(url)
y <- url[3,]
View(y)
View(url)
View(y)
View(y)
yields <- read.csv("https://www.quandl.com/api/v3/datasets/USTREASURY/YIELD.csv")#vector of maturities in years
Vandermonde <- function(){
V <- matrix(0,nrow = length(x) , ncol = length(x))
V <- x^(col(V)-1)
}
Vandermonde <- function(){
v <- matrix(0,nrow = length(x) , ncol = length(x))
v <- x^(col(V)-1)
}
solve(v,yields)
v <- matrix(0,nrow = length(x) , ncol = length(x))
v <- x^(col(V)-1)
solve(v,yields)
View(y)
#Next write a function which will create the matrix from example 58.
y<- yield[,2:12]
#Next write a function which will create the matrix from example 58.
y<- yield[,-1]
#Next write a function which will create the matrix from example 58.
y<- yields[,-1]
View(y)
y<- yields[,-1]
v <- matrix(0,nrow = length(x) , ncol = length(x))
v <- x^(col(V)-1)
solve(v,yields)
solve(v,y)
#Next write a function which will create the matrix from example 58.
y<- yields[3,-1]
solve(v,y)
#Next write a function which will create the matrix from example 58.
y<- yields[3,]
solve(v,y)
#Next write a function which will create the matrix from example 58.
y<- yields[3,-1]
solve(v,y)
#Next write a function which will create the matrix from example 58.
y<- yields[3,-12]
#Next write a function which will create the matrix from example 58.
y<- yields[3,-1]
solve(v,y)
View(y)
solve(v,t(y))
View(v)
y<- yields[3,-1]
v <- matrix(0,nrow = length(x) , ncol = length(x))
v <- x^(col(v)-1)
solve(v,t(y))
solve(v,y)
#Next write a function which will create the matrix from example 58.
x   <- c(1/12, 2/12, 3/12, 6/12, 1, 2, 3, 5, 7, 10, 20, 30)
yields <- read.csv("https://www.quandl.com/api/v3/datasets/USTREASURY/YIELD.csv")
y <- yields[3,-1]
y <- t(yields[3,-1])
v <- matrix(0,nrow = length(x) , ncol = length(x))
v <- x^(col(v)-1)
solve(v,y)
View(v)
View(yields)
y <- t(yields[3780,-1 & -3])
y <- t(yields[3780,])
solve(v,y)
y <- t(yields[3780,-1])
solve(v,y)
v1 <- matrix(0,nrow = length(x) , ncol = length(x))
a <- as.vector(x,y)
v1 <- solve(x,y)
v1 <- solve(v,y)
View(y)
y <- t(yields[3780,-1&-3&-13])
y <- t(yields[3780, -13])
y <- t(yields[3780, -13:-1])
y <- t(yields[3780, -1:-3])
y <- t(yields[3780,c(3,13)] <- list(NULL)]
v <- matrix(0,nrow = length(x) , ncol = length(x))
v <- x^(col(v)-1)
solve(v,y)
#Create the Vandermonde matrix (21)
#Solve the problem using the matrix and your vector of yields
#Get the solution to the polynomial
polyexample <- function ( ){
v1 <- solve(v,y)
a <-
}
##----------------Cubic interpolation--------------
cubicexample <- function( ){ #don't forget to insert the arguments
#Construct the matrix from example 59 (eq 31) using (29) . Hint: you can use functions diff(), row() and col().
#If you have never seen the last two before, check how they work first on any matrix
Z <- diag(diff(x, lag = 2)/3, length(x) - 2, length(x) - 2) #this is only for diagonal elements
#Solve for second derivatives
#Find A, B, C, D from equations (36) and (38) and solve eq (37)
}
View(y)
View(y)
y <- t(yields[3780,] <- list(NULL)]
v <- matrix(0,nrow = length(x) , ncol = length(x))
v <- x^(col(v)-1)
solve(v,y)
#Create the Vandermonde matrix (21)
#Solve the problem using the matrix and your vector of yields
#Get the solution to the polynomial
polyexample <- function ( ){
v1 <- solve(v,y)
a <-
}
##----------------Cubic interpolation--------------
cubicexample <- function( ){ #don't forget to insert the arguments
#Construct the matrix from example 59 (eq 31) using (29) . Hint: you can use functions diff(), row() and col().
#If you have never seen the last two before, check how they work first on any matrix
Z <- diag(diff(x, lag = 2)/3, length(x) - 2, length(x) - 2) #this is only for diagonal elements
#Solve for second derivatives
#Find A, B, C, D from equations (36) and (38) and solve eq (37)
}
y <- t(yields[3780,]
y <- t(yields[3780,])
y <- t(yields[3780,])
y <- t(yields[3780,-"NA"])
View(y)
y <- t(yields[3780,c(1,3,13)]) <- list([NULL])
y <- t(yields[3780,c(1,3,13)]) <- list(NULL)
y <- t(yields[3780,c(1,3,13)]) <- list(NULL)
y <- t(yields[3780,c(-1,-3,-13)])
solve(v,y)
x1 <- x[,c(-2,-12)]
x1 <- x[c(-2,-12),]
x1 <- x[-2,]
x1 <- x[-2]
x1 <- x[c(-2,-12)]
x   <- c(1/12, 2/12, 3/12, 6/12, 1, 2, 3, 5, 7, 10, 20, 30)
x1 <- x[c(-2,-12)]
yields <- read.csv("https://www.quandl.com/api/v3/datasets/USTREASURY/YIELD.csv")
y <- t(yields[3780,c(-1,-3,-13)])
v <- matrix(0,nrow = length(x1) , ncol = length(x1))
v <- x1^(col(v)-1)
solve(v,y)
Z <- diag(diff(x, lag = 2)/3, length(x) - 2, length(x) - 2)
View(Z)
Z <- diag(diff(x, lag = 2)/3, length(x) - 2, length(x) - 2)#this is only for diagonal elements
U <- matrix(0,ncol = length (x), nrow = length (x))
for(i in 1:ncol(x)){
prod(x[i]-x[0:i-1])
}
ncol(x)
col(x)
col(U)
for(i in 1:col(U)){
prod(x[i]-x[0:i-1])
}
x <- c(1,2,3,4)
y <- c(5,6,7,8)
for(i in x){
x[i]*y[i]
}
Da <- function(x, y){
# Asset Duration
# x and y are vectors
# x contains the porportion of asset in asset portfolio
# y contains the duration of asset
for (i in x){
x[i]*y[j]
}
Da <- function(x, y){
# Asset Duration
# x and y are vectors
# x contains the porportion of asset in asset portfolio
# y contains the duration of asset
for (i in x){
x[i]*y[j]
}
}
Da(x,y)
source('~/.active-rstudio-document', echo=TRUE)
}
Da(x,y)
Da <- function(x, y){
# Asset Duration
# x and y are vectors
# x contains the porportion of asset in asset portfolio
# y contains the duration of asset
for (i in x){
x[i]*y[i]
}
}
Da(x,y)
Da(x,y)
Da <- function(x, y){
# Asset Duration
# x and y are vectors
# x contains the porportion of asset in asset portfolio
# y contains the duration of asset
for (i in x){
for(j in y){
x[i]*y[j]
}
}
}
Da(x,y)
x <- c(1,2,3,4)
y <- c(5,6,7,8)
Da(x,y)
Da(c(1,2,3), c(4,5,6))
Da <- function(x, y){
# Asset Duration
# x and y are vectors
# x contains the porportion of asset in asset portfolio
# y contains the duration of asset
for (i in x){
for(j in i:length(y)){
x[i]*y[j]
}
}
}
Da(x, y)
Da <- function(x, y){
# Asset Duration
# x and y are vectors
# x contains the porportion of asset in asset portfolio
# y contains the duration of asset
for (i in x){
for (j in i:length(x)){
x[i]*y[j]
}
}
}
Da(x,y)
Da(c(1,2,3), c(4,5,6))
Da <- function(x, y){
# Asset Duration
# x and y are vectors
# x contains the porportion of asset in asset portfolio
# y contains the duration of asset
for (i in n){
for (j in i:n){
x[i]*y[j]
}
}
}
Da(c(1,2,3), c(4,5,6))
Da <- function(x, y){
# Asset Duration
# x and y are vectors
# x contains the porportion of asset in asset portfolio
# y contains the duration of asset
for (i in n){
for (j in i:n){
print(x[i]*y[j])
}
}
}
Da(c(1,2,3), c(4,5,6))
Da <- function(x, y){
# Asset Duration
# x and y are vectors
# x contains the porportion of asset in asset portfolio
# y contains the duration of asset
n <- length(y)
for (i in n){
for (j in i:n){
print(x[i]*y[j])
}
}
}
Da(c(1,2,3), c(4,5,6))
Da <- function(x, y){
# Asset Duration
# x and y are vectors
# x contains the porportion of asset in asset portfolio
# y contains the duration of asset
n <- length(y)
for (i in n){
for (j in n){
print(x[i]*y[j])
}
}
}
Da(c(1,2,3), c(4,5,6))
Da <- function(x, y){
# Asset Duration
# x and y are vectors
# x contains the porportion of asset in asset portfolio
# y contains the duration of asset
n <- length(y)
for (i in 1:n){
for (j in 1:n){
print(x[i]*y[j])
}
}
}
Da(c(1,2,3), c(4,5,6))
Da <- function(x, y){
# Asset Duration
# x and y are vectors
# x contains the porportion of asset in asset portfolio
# y contains the duration of asset
n <- length(y)
for (i in n){
for (j in 1:n){
print(x[i]*y[j])
}
}
}
Da(c(1,2,3), c(4,5,6))
Da <- function(x, y){
# Asset Duration
# x and y are vectors
# x contains the porportion of asset in asset portfolio
# y contains the duration of asset
n <- length(y)
for (i in x[]){
for (j in y[]){
print(x[i]*y[j])
}
}
}
Da(c(1,2,3), c(4,5,6))
Da <- function(x, y){
# Asset Duration
# x and y are vectors
# x contains the porportion of asset in asset portfolio
# y contains the duration of asset
n <- length(y)
for (i in x){
for (j in y){
print(x[i:n]*y[j:n])
}
}
}
Da(c(1,2,3), c(4,5,6))
Da <- function(x, y){
# Asset Duration
# x and y are vectors
# x contains the porportion of asset in asset portfolio
# y contains the duration of asset
n <- length(y)
for (i in x[1:n]){
for (j in y[1:n]){
print(x[i]*y[j])
}
}
}
Da(c(1,2,3), c(4,5,6))
Da <- function(x, y){
# Asset Duration
# x and y are vectors
# x contains the porportion of asset in asset portfolio
# y contains the duration of asset
n <- length(y)
for (i in x){
for (j in y){
print(x[i]*y[j])
}
}
}
Da(c(1,2,3), c(4,5,6))
Da <- function(x, y){
# Asset Duration
# x and y are vectors
# x contains the porportion of asset in asset portfolio
# y contains the duration of asset
n <- length(y)
for (i in x){
for (j in y){
print(x[1]*y[1])
}
}
}
Da(c(1,2,3), c(4,5,6))
Da <- function(x, y){
# Asset Duration
# x and y are vectors
# x contains the porportion of asset in asset portfolio
# y contains the duration of asset
n <- length(y)
for (i in n){
for (j in n){
print(x[1]*y[1])
}
}
}
Da(c(1,2,3), c(4,5,6))
Da <- function(x, y){
# Asset Duration
# x and y are vectors
# x contains the porportion of asset in asset portfolio
# y contains the duration of asset
n <- length(y)
for (i in n){
for (j in n){
print(x[n]*y[n])
}
}
}
Da(c(1,2,3), c(4,5,6))
Da <- function(x, y){
# Asset Duration
# x and y are vectors
# x contains the porportion of asset in asset portfolio
# y contains the duration of asset
n <- length(y)
for (i in n){
for (j in n){
print(x[1:n]*y[1:n])
}
}
}
Da(c(1,2,3), c(4,5,6))
Da <- function(x, y){
# Asset Duration
# x and y are vectors
# x contains the porportion of asset in asset portfolio
# y contains the duration of asset
n <- length(y)
for (i in n){
for (j in n){
print(sum(x[1:n]*y[1:n]))
}
}
}
Da(c(1,2,3), c(4,5,6))
delta_A <- function(Da, A, r_delta, r){
# Duration approx. on A
# change inflicted on assets due to the change in interest rate
# A is total assets, -Da is the total duration of assets, r_shock = deltaR/1+R
# Shock in level of i.r. R (either positive or negative)
# r_delta is the amount movement of the i.r. positive or negative
r_shock <- r_delta/(1+r)
-Da * A * r_shock
}
delta_A(8.67, 25000, 0.0015, 0.035)
ladg <- function(Da, Dl, A, L){
# Leverage adjsuted duration gap
k <- L/A
Da * (Dl*k)
}
ladg(3.76, 1.56, 25000, 40000)
simple_delta_E <- function(delta_A, delta_L){
# then delta_E = (-Da * A * delta_R/1+R) - (-Dl * L * delta_R/1+R), for different i.r. shock on assets and liabilities
delta_A - delta_L
}
delta_E <- function(ladg, A, r_delta, r){
r_shock <- r_delta/(1+r)
-ladg * A * r_shock
}
delta_E(3.65, 25000, 0.0015, 0.035)
library(durationModel)
library(dmdl)
setwd("C:/Users/Phoebe/Desktop/Programming II/Package Project/dmdl/dmdl")
devtools::load_all(".")
library(dmdl)
devtools::install(build_vignettes = TRUE)
vignette(dmdl)
browseVignettes(package = "dmdl")
library(dmdl)
